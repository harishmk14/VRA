import React, { useState, useRef, useEffect } from 'react';
import VehicleAvailability from '../Dashboard/VehicleAvailabilitys';
import FilterModal from '../Booking/FilterModal'; // Import the filter modal

const Booking = () => {
  const bookingData = Array.from({ length: 25 }, (_, index) => ({
    id: index + 1,
    bookingType: index % 2 === 0 ? 'Online' : 'Offline',
    bookedAt: `2024-10-0${(index % 5) + 1}`,
    vehicleNo: `VEH${(index % 5) + 1}234`,
    driverId: `D00${(index % 5) + 1}`,
    customerName: `Customer ${index + 1}`,
    journeyType: index % 2 === 0 ? 'One-way' : 'Round-trip',
    noOfPersons: (index % 5) + 1,
    verified: Math.random() > 0.5,
  }));

  const [currentPage, setCurrentPage] = useState(1);
  const [showModal, setShowModal] = useState(false);
  const [showFilterModal, setShowFilterModal] = useState(false);
  const [filters, setFilters] = useState({ bookingType: '', journeyType: '' });

  const entriesPerPage = 7;
  const indexOfLastEntry = currentPage * entriesPerPage;
  const indexOfFirstEntry = indexOfLastEntry - entriesPerPage;

  // Filter the booking data based on the selected filters
  const filteredEntries = bookingData.filter((booking) => {
    return (
      (filters.bookingType ? booking.bookingType === filters.bookingType : true) &&
      (filters.journeyType ? booking.journeyType === filters.journeyType : true)
    );
  });

  const totalPages = Math.ceil(filteredEntries.length / entriesPerPage);
  
  // Update currentEntries based on filtered data
  const currentEntries = filteredEntries.slice(indexOfFirstEntry, indexOfLastEntry);

  const modalRef = useRef(null); // Create a ref for the modal

  const handlePageChange = (pageNumber) => setCurrentPage(pageNumber);
  const handleDetailsClick = (bookingId) => alert(`Details for Booking ID: ${bookingId}`);
  const toggleModal = () => setShowModal(!showModal);
  const toggleFilterModal = () => setShowFilterModal(!showFilterModal);

  const applyFilters = (filterValues) => {
    setFilters(filterValues);
  };

  // Close modal if user clicks outside of it
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        setShowModal(false);
        setShowFilterModal(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const renderPageNumbers = () => {
    const pageNumbers = [];
    if (totalPages <= 6) {
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(
          <button
            key={i}
            onClick={() => handlePageChange(i)}
            className={`px-2 py-0.5 rounded ${currentPage === i ? 'bg-blue-500 text-white' : 'text-blue-500'}`}
          >
            {i}
          </button>
        );
      }
    } else {
      pageNumbers.push(
        <button
          key={1}
          onClick={() => handlePageChange(1)}
          className={`px-2 py-0.5 rounded ${currentPage === 1 ? 'bg-blue-500 text-white' : 'text-blue-500'}`}
        >
          1
        </button>
      );
      if (currentPage > 4) pageNumbers.push(<span key="dots-start">...</span>);
      for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
        pageNumbers.push(
          <button
            key={i}
            onClick={() => handlePageChange(i)}
            className={`px-2 py-0.5 rounded ${currentPage === i ? 'bg-blue-500 text-white' : 'text-blue-500'}`}
          >
            {i}
          </button>
        );
      }
      if (currentPage < totalPages - 3) pageNumbers.push(<span key="dots-end">...</span>);
      pageNumbers.push(
        <button
          key={totalPages}
          onClick={() => handlePageChange(totalPages)}
          className={`px-2 py-0.5 rounded ${currentPage === totalPages ? 'bg-blue-500 text-white' : 'text-blue-500'}`}
        >
          {totalPages}
        </button>
      );
    }
    return pageNumbers;
  };

  return (
    <div className="p-5 pt-2 h-full w-full">
      <div className="h-full w-full grid grid-rows-[auto_1fr]">
        <div className="w-full h-auto flex items-center justify-end py-3 gap-3">
          <button
            onClick={toggleModal}
            className="bg-blue-500 text-white px-2 py-1 rounded flex items-center gap-1"
          >
            <i className="bi bi-clipboard-plus"></i> Book
          </button>
          <button onClick={toggleFilterModal} className="bg-blue-500 text-white px-2 py-1 rounded flex items-center gap-1">
            <i className="bi bi-funnel"></i> Filter
          </button>
        </div>

        {/* Modal for Booking */}
        <div ref={modalRef} className={`absolute z-10 mt-14 mr-5 right-0 transition-opacity duration-300 ${showModal ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
          <div className="bg-white p-5 rounded-md shadow-lg w-96">
            <VehicleAvailability />
          </div>
        </div>

        {/* Filter Modal */}
        {showFilterModal && (
          <div className={`absolute z-10 mt-14 mr-5 right-0 transition-opacity duration-300 opacity-100`}>
            <div className="bg-white p-5 rounded-md shadow-lg w-96">
              <FilterModal onClose={toggleFilterModal} onApply={applyFilters} />
            </div>
          </div>
        )}

        <div className="w-full h-full bg-white rounded-md shadow-md overflow-hidden">
          <div className="flex flex-col h-full">
            <div className="overflow-auto flex-grow">
              <table className="min-w-full border-collapse border-spacing-0">
                <thead>
                  <tr className="bg-blue-100">
                    <th className="px-4 py-2 text-left">S. No</th>
                    <th className="px-4 py-2 text-left">Booking Type</th>
                    <th className="px-4 py-2 text-left">Booked At</th>
                    <th className="px-4 py-2 text-left">Vehicle No</th>
                    <th className="px-4 py-2 text-left">Driver ID</th>
                    <th className="px-4 py-2 text-left">Customer Name</th>
                    <th className="px-4 py-2 text-left">Journey Type</th>
                    <th className="px-4 py-2 text-left">No of Persons</th>
                    <th className="px-4 py-2 text-left">Verified</th>
                    <th className="px-4 py-2 text-left">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {currentEntries.map((booking, index) => (
                    <tr key={booking.id} className="border-b border-gray-300 last:border-b-0">
                      <td className="px-4 py-2">{index + 1}</td>
                      <td className="px-4 py-2">{booking.bookingType}</td>
                      <td className="px-4 py-2">{booking.bookedAt}</td>
                      <td className="px-4 py-2">{booking.vehicleNo}</td>
                      <td className="px-4 py-2">{booking.driverId}</td>
                      <td className="px-4 py-2">{booking.customerName}</td>
                      <td className="px-4 py-2">{booking.journeyType}</td>
                      <td className="px-4 py-2">{booking.noOfPersons}</td>
                      <td className="px-4 py-2">{booking.verified ? 'Yes' : 'No'}</td>
                      <td className="px-4 py-2">
                        <button onClick={() => handleDetailsClick(booking.id)} className="text-blue-500 hover:underline">View Details</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="flex justify-between items-center p-2 bg-gray-100">
              <div>
                {renderPageNumbers()}
              </div>
              <div>
                <span className="text-gray-600">Page {currentPage} of {totalPages}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Booking;
